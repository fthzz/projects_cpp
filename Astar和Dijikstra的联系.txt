（1）Dijikstra算法在开阔空间中查找源点到目标点的最短路径之时，其执行过程类似于以源点为中心，源点到目标点的距离为半径，进行广度搜索的状态。也就是从源点一层一层的向外扩的方式进行查找，直至找到目标点停止。

Dijikstra的缺陷：在于每次从未遍历过的节点集合K中取出要进行访问的节点时，只考虑距离源节点最近的节点，且与源节点之间距离最短的节点数目较多，没有考虑取出的节点与目标节点之间的距离的问题。 而使得每次取出的节点都无法很好的逼近目标节点，只是“盲目”的在图中向目标节点搜索。

（2）A*算法在Dijikstra算法的基础上进行改进，其引入了一个评估函数。f(x) = g(x) + h(x)。其中g(x)是从起点到当前节点x的实际距离量度，也就是在Dijikstra算法中，源点到当前节点的最短距离dist[source][x]。h(x)是从节点x到终点的最小距离估计，h(x)主流是从欧几里得距离或者曼哈顿距离中选取。

因此我们可知，f(x)综合考虑了节点x与源节点以及目标节点之间的距离关系。A*算法相较于Dijikstra算法，在其它步骤上都没有任何变化，只是在每次从未访问过的节点集合K中取出节点进行访问时，判断的依据从原先的与源节点距离最短的节点变为f(x)中值最小的那个节点。

（3）A*的缺陷：
分析： A*算法不一定能够得到最优解。当h*(x)表示节点x到达目标节点的真实代价。那么存在如下四种情况：

如果h(x) = 0,这种情况下，A*算法变为了Dijikstra算法
如果h(x) < h*(x),这种情况下，搜索的点数多，搜索范围大，效率低。但能得到最优解
如果h(x) = h*(x)，此时的搜索效率是最高的。

如果h(x) > h*(x)，搜索的点数少，搜索范围小，效率高，但不能保证得到最优解。（这个点要着重注意：例如两条线路，其中一条前半段好走，后半段难走，另一条前半段难走，后半段好走；A*就会选择前一条，但实际上最终哪条路最短并不确定。

（4）总结： A*算法是一种启发式搜索算法，h(x)作为搜索代价的启发函数，其影响着搜索的精确度和效率。对于A*算法，其能够适应静态路网的情况，而对于动态路网的情况，其不能很好的适应。



